#!/usr/bin/env node

/**
 * Module dependencies.
 */

import app from'../app.js';
import { connectToDb, initialzeDbSchema } from '../config/db.js';
import logger from '../utils/logger.js';

import deb from'debug'
import http from 'http';
import dotenv from 'dotenv';
dotenv.config();


const debug = deb('url-shortner:server');


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
*/

const server = http.createServer(app);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
const signals = {
  'SIGHUP': 1,
  'SIGINT': 2,
  'SIGTERM': 15
};

let shuttingDown = false;
 
 const shutdown = (signal, value) => {
   if (shuttingDown) {
     logger.info(`Already shutting down. Received ${signal} again`);
     return;
   }
   shuttingDown = true
   logger.info(`Received ${signal}. Shutting down gracefully`)
   server.close((err) => {
     if (err) {
       logger.error("Error closing server", err)
       process.exit(1)
     } else {
       logger.info('server closed. Exiting the process.')
       process.exit(0)
     }
   })
 }
 
 Object.keys(signals).forEach((signal) => {
   process.on(signal, () => {
    //  logger.info(`Recieved ${signal}`)
     shutdown(signal, signals[signal])
   })
 })

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
const startServer = async () => {
  try {
    logger.info(`Attempting to Start server on port ${port}`)
    // await connectToDb()
    // await initialzeDbSchema()
    logger.info(`Starting server on port ${port}`)
    await connectToDb()
   // await initialzeDbSchema()
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    logger.error('Failed during server startup process: ', error)
    process.exit(1)
  }
}

startServer()
